# python3

import sys, threading
sys.setrecursionlimit(10**7) # max depth of recursion
threading.stack_size(2**27)  # new thread will get stack of such size

class TreeHeight:
        def read(self):
                self.n = int(sys.stdin.readline())
                self.parent = list(map(int, sys.stdin.readline().split()))
				self.nodes={}
				for i in range(-1, n):
					self.nodes[i] = []
				for i,x in self.parent:
					self.nodes[x].append(i)
						

        def compute_height(self):
				visited = [ i for i in range(n)]
                # Replace this code with a faster implementation
                maxHeight = 0
                for vertex in range( n):
                        if self.nodes[vertex] == None:
							visit = vertex
							while self.parent[visit] != -1:
								visit = self.parent[visit]
								height+=1
						height+=1
                        maxHeight = max(maxHeight, height);
                return maxHeight;

def main():
  tree = TreeHeight()
  tree.read()
  print(tree.compute_height())

threading.Thread(target=main).start()
